{"version":3,"sources":["logic/operate.js","components/Calculator.js","logic/calculate.js","App.js","index.js"],"names":["operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","err","mod","Error","Calculator","props","calculator","bind","returnResults","obj","button","updateState","this","newObj","buttonName","total","next","match","includes","parseFloat","calculate","digitObj","undefined","className","type","value","onClick","React","Component","App","state","setState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4993f7e4.chunk.js","sourcesContent":["import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  if (operation === 'รท') {\n    try {\n      return one.div(two).toString();\n    } catch (err) {\n      return \"Can't divide by 0.\";\n    }\n  }\n  if (operation === '%') {\n    return one.mod(two).toString();\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","/* eslint-disable react/forbid-prop-types */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport calculate from '../logic/calculate';\nimport './Calculator.css';\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.calculator = this.calculator.bind(this);\n    this.returnResults = this.returnResults.bind(this);\n  }\n\n  calculator(obj, button) {\n    const { updateState } = this.props;\n    const newObj = calculate(obj, button);\n\n    this.digitObj = newObj;\n    updateState(newObj);\n  }\n\n  returnResults() {\n    const { digitObj } = this.props;\n    const { total, next, operation } = digitObj;\n\n    if (total === null && next === null) {\n      return 0;\n    } if (next !== null && total === null) {\n      return next;\n    } if (total !== null && next !== null) {\n      if (operation !== null && operation !== undefined) {\n        return `${total} ${operation} ${next}`;\n      }\n      return total;\n    }\n    return total;\n  }\n\n  render() {\n    const { digitObj } = this.props;\n\n    return (\n      <section className=\"container\">\n        <div className=\"returnSection\">\n          {(this.returnResults())}\n        </div>\n        <div className=\"digits\">\n          <button type=\"button\" className=\"digits-elts\" value=\"AC\" onClick={() => { this.calculator(digitObj, 'AC'); }}>AC</button>\n          <button type=\"button\" className=\"digits-elts\" value=\"+/-\" onClick={() => { this.calculator(digitObj, '+/-'); }}>+/-</button>\n          <button type=\"button\" className=\"digits-elts\" value=\"%\" onClick={() => { this.calculator(digitObj, '%'); }}>%</button>\n          <button type=\"button\" className=\"digits-elts operator\" value=\"รท\" onClick={() => { this.calculator(digitObj, 'รท'); }}>รท</button>\n          <button type=\"button\" className=\"digits-elts\" value=\"7\" onClick={() => { this.calculator(digitObj, '7'); }}>7</button>\n          <button type=\"button\" className=\"digits-elts\" value=\"8\" onClick={() => { this.calculator(digitObj, '8'); }}>8</button>\n          <button type=\"button\" className=\"digits-elts\" value=\"9\" onClick={() => { this.calculator(digitObj, '9'); }}>9</button>\n          <button type=\"button\" className=\"digits-elts operator\" value=\"x\" onClick={() => { this.calculator(digitObj, 'x'); }}>x</button>\n          <button type=\"button\" className=\"digits-elts\" value=\"4\" onClick={() => { this.calculator(digitObj, '4'); }}>4</button>\n          <button type=\"button\" className=\"digits-elts\" value=\"5\" onClick={() => { this.calculator(digitObj, '5'); }}>5</button>\n          <button type=\"button\" className=\"digits-elts\" value=\"6\" onClick={() => { this.calculator(digitObj, '6'); }}>6</button>\n          <button type=\"button\" className=\"digits-elts operator\" value=\"-\" onClick={() => { this.calculator(digitObj, '-'); }}>-</button>\n          <button type=\"button\" className=\"digits-elts\" value=\"1\" onClick={() => { this.calculator(digitObj, '1'); }}>1</button>\n          <button type=\"button\" className=\"digits-elts\" value=\"2\" onClick={() => { this.calculator(digitObj, '2'); }}>2</button>\n          <button type=\"button\" className=\"digits-elts\" value=\"3\" onClick={() => { this.calculator(digitObj, '3'); }}>3</button>\n          <button type=\"button\" className=\"digits-elts operator\" value=\"+\" onClick={() => { this.calculator(digitObj, '+'); }}>+</button>\n        </div>\n        <span className=\"end\">\n          <button type=\"button\" className=\"digits-elts\" value=\"0\" onClick={() => { this.calculator(digitObj, '0'); }}>0</button>\n          <button type=\"button\" className=\"digits-elts \" value=\".\" onClick={() => { this.calculator(digitObj, '.'); }}>.</button>\n          <button type=\"button\" className=\"digits-elts operator\" value=\"=\" onClick={() => { this.calculator(digitObj, '='); }}>=</button>\n        </span>\n      </section>\n    );\n  }\n}\n\nCalculator.propTypes = {\n  updateState: PropTypes.func.isRequired,\n  digitObj: PropTypes.object.isRequired,\n};\n\nexport default Calculator;\n","import operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { ...obj, next: obj.next + buttonName };\n      }\n      return { ...obj, next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      if (obj.next.includes('.')) {\n        return { ...obj };\n      }\n      return { ...obj, next: `${obj.next}.` };\n    }\n    if (obj.operation) {\n      return { next: '0.' };\n    }\n    if (obj.total) {\n      if (obj.total.includes('.')) {\n        return {};\n      }\n      return { total: `${obj.total}.` };\n    }\n    return { total: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { ...obj, next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { ...obj, total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation after pressing '='\n  if (!obj.next && obj.total && !obj.operation) {\n    return { ...obj, operation: buttonName };\n  }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    if (obj.total && !obj.next) {\n      return { ...obj, operation: buttonName };\n    }\n\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","import React from 'react';\nimport './App.css';\nimport Calculator from './components/Calculator';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      digitObj: {\n        total: null,\n        next: null,\n        operation: null,\n      },\n    };\n    this.updateState = this.updateState.bind(this);\n  }\n\n  updateState(obj) {\n    this.setState({\n      digitObj: obj,\n    });\n  }\n\n  render() {\n    const { digitObj } = this.state;\n    return (\n      <div className=\"App\">\n        <Calculator updateState={this.updateState} digitObj={digitObj} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}